# -*- coding: utf-8 -*-
"""GPV Reserve for THT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v93FYo1MFPtRYL5BhrvsuAAalH2h8-Cu

# Import Package dan Tabel
"""

#1. Import Package
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from datetime import datetime, timedelta
from prettytable import PrettyTable

#2. Import tabel
mortalita = pd.read_excel('tabel mortalita.xlsx')
faktor = pd.read_excel('tabel faktor.xlsx')
data_excel = pd.read_excel('insured information.xlsx')

"""# Input Data

"""

#3. Input Data
row=int(input("Masukkan Nomor Baris Sampel : "))

# Menampilkan kolom yang diinginkan menggunakan iloc
job_type = data_excel.iloc[row, 5]
born_date = data_excel.iloc[row, 1]
start_date = data_excel.iloc[row, 2]
valuation_date = data_excel.iloc[row, 7]
kdjiwa = data_excel.iloc[row, 4]
jumlah_pasangan_input = int(str(kdjiwa)[1])
jumlah_anak_input = int(str(kdjiwa)[2:])
pension_age = data_excel.iloc[row, 8]
pension_date1 = born_date.replace(year=born_date.year + pension_age)
last_day_of_month = (pension_date1.replace(day=1) + timedelta(days=31)).replace(day=1) - timedelta(days=1)
pension_date = pension_date1.replace(day=last_day_of_month.day)
gapokawal1 = data_excel.iloc[row, 10]
gapokawal2 = data_excel.iloc[row, 11]
born_date_pasangan = data_excel.iloc[row, 12]
born_date_anak1 = data_excel.iloc[row, 13]
born_date_anak2 = data_excel.iloc[row, 14]
interest = data_excel.iloc[row, 17]
inflasi = data_excel.iloc[row, 18]
skg = data_excel.iloc[row, 19]
start_age1 = ((start_date - born_date).days / 365.25) #usia masuk
start_age = valuation_date.year - born_date.year - ((valuation_date.month, valuation_date.day) < (born_date.month, born_date.day)) #usia valuasi
if jumlah_pasangan_input > 0:
  start_age_pasangan = valuation_date.year - born_date_pasangan.year - ((valuation_date.month, valuation_date.day) < (born_date_pasangan.month, born_date_pasangan.day))
else : start_age_pasangan=0

if jumlah_anak_input > 0:
  start_age_anak1 = valuation_date.year - born_date_anak1.year - ((valuation_date.month, valuation_date.day) < (born_date_anak1.month, born_date_anak1.day))
else : start_age_anak1=0

if jumlah_anak_input > 1:
  start_age_anak2 = valuation_date.year - born_date_anak2.year - ((valuation_date.month, valuation_date.day) < (born_date_anak2.month, born_date_anak2.day))
else : start_age_anak2=0

# Menampilkan semua informasi yang telah diambil
print("Job Type:", job_type)
print("Born Date:", born_date)
print("Start Date:", start_date)
print("Valuation Date:", valuation_date)
print("Pension Age:", pension_age)
print("Pension Date:", pension_date)
print("Gapok 1:", gapokawal1)
print("Gapok 2:", gapokawal2)

if jumlah_pasangan_input == 0:
    print("Tidak ada pasangan.")
else:
    print(f"Jumlah Pasangan: {jumlah_pasangan_input}")

if jumlah_anak_input > 0:
    print(f"Jumlah Anak: {jumlah_anak_input}")
else:
    print("Tidak ada anak.")

if jumlah_pasangan_input > 0:
    print("Born Date Pasangan:", born_date_pasangan)
if jumlah_anak_input > 0:
  print("Born Date Anak 1:", born_date_anak1)
if jumlah_anak_input > 1:
  print("Born Date Anak 2:", born_date_anak2)
print("Interest:", interest)
print("Inflasi:", inflasi)
print("Skala Kenaikan Gaji:", skg)

"""# Valuasi Asuransi Dwiguna"""

#4. Define Fungsi Asuransi Endowment

# Membuat list untuk menyimpan hasil perhitungan
output1_list = []
benefit_pensiun_list = []
benefit_meninggal_list = []
benefit_keluar_list = []
benefit_uzur_list = []
PV_benefit_pensiun_list = []
PV_benefit_meninggal_list = []
PV_benefit_keluar_list = []
PV_benefit_uzur_list = []

# MI1 dan MI2
def MI1(start_date, valuation_date):
    delta = valuation_date - timedelta(days=365) - start_date
    years = delta.days / 365.25
    return years

def MI2(start_date, valuation_date):
    if start_date > datetime(2001, 1, 1):
        duration = MI1(start_date, valuation_date)
    else:
        delta = valuation_date - timedelta(days=365)- datetime(2001, 1, 1)
        years = delta.days / 365.25
        duration = years
    return duration

# P1 dan P2
def P1(start_age, pension_age, gapokawal1, jumlah_pasangan=0, jumlah_anak=0):
    gaji_list = []
    max_gp1_value1 = 722500  # Nilai maksimal GP1 untuk PNS
    max_gp1_value2 = 2257900  # Nilai maksimal GP1 untuk Hakim

    for i in range(start_age, pension_age):
        if i == start_age:  # Gaji tetap pada usia awal
            gaji_awal = gapokawal1
        else:
            gaji_awal *= 1 + 0.025  # Meningkatkan gaji sebesar 2.5%

        # Jika start_age < 2001 dan gaji pokok mendekati atau melebihi maksimal, atur GP1 menjadi konstan
        if start_date < datetime(2001, 1, 1) and job_type == "PNS" and gaji_awal >= max_gp1_value1:
            gaji_awal = max_gp1_value1

        if start_date < datetime(2001, 1, 1) and job_type == "HKM" and gaji_awal >= max_gp1_value2:
            gaji_awal = max_gp1_value2

        # Menambah tunjangan istri
        tunjangan_istri = 0.1 * gaji_awal * jumlah_pasangan_input

        # Menambah tunjangan anak
        tunjangan_anak = 0.02 * gaji_awal * jumlah_anak_input

        P1_value = gaji_awal + tunjangan_istri + tunjangan_anak

        gaji_list.append(P1_value)
    return gaji_list

def P2(start_age, pension_age, gapokawal1, jumlah_pasangan=0, jumlah_anak=0):
    gaji_list = []

    for i in range(start_age, pension_age):
        if i == start_age:  # Gaji tetap pada usia awal
            gaji_awal = gapokawal2
        else:
            gaji_awal *= 1 + 0.025  # Meningkatkan gaji sebesar 2.5%

        # Menambah tunjangan istri
        tunjangan_istri = 0.1 * gaji_awal * jumlah_pasangan_input

        # Menambah tunjangan anak
        tunjangan_anak = 0.02 * gaji_awal * jumlah_anak_input

        P2_value = gaji_awal + tunjangan_istri + tunjangan_anak
        gaji_list.append(P2_value)

    return gaji_list

# Y1 dan Y2
def Y1(start_age1):
    if usia <= 58:
        return  58-start_age1
    elif usia <= pension_age:
        return usia - start_age1
    else:
        return pension_age - 58

def Y2(start_date, start_age1, pension_age):
    if start_date > datetime(2001, 1, 1):
        return Y1(start_age1)
    else:
        age_on_jan_1_2001 = start_age1 + (datetime(2001, 1, 1) - start_date).days / 365.25
        if usia <= 58:
            return 58 - age_on_jan_1_2001
        elif usia <= pension_age:
            return usia - age_on_jan_1_2001
        else:
            return pension_age - 58

# Benefit Pensiun
def calculate_benefit_pensiun(gaji_list_P1, gaji_list_P2, job_type):
    if job_type == "PNS":
        benefit_pensiun = 0.6 * ((pension_date - start_date).days/365.25) * gaji_list_P1[-1] + 0.6 * ((pension_date - datetime(2001, 1, 1)).days/365.25) * (gaji_list_P2[-1] - gaji_list_P1[-1])
    elif job_type == "HKM":
        benefit_pensiun = 0.55 * ((pension_date - start_date).days/365.25) * gaji_list_P1[-1] + 0.6 * ((pension_date - datetime(2001, 1, 1)).days/365.25) * (gaji_list_P2[-1] - gaji_list_P1[-1])
    else:
        benefit_pensiun = 0
    return benefit_pensiun

# Benefit Uzur
def calculate_benefit_uzur(mi1, mi2, p1, p2):
    if job_type == "PNS":
        benefit_uzur = (0.6 * mi1 * p1 + 0.6 * mi2 * (p2 - p1))
    elif job_type == "HKM":
        benefit_uzur = 0.55 * mi1 * p1 + 0.55 * mi2 * (p2 - p1)
    else:
        benefit_uzur = 0
    return benefit_uzur

# Benefit Meninggal
def calculate_benefit_meninggal(y1, p1, p2):
    if job_type == "PNS":
        benefit_meninggal = (0.6 * y1 * p1 + 0.6 * y2 * (p2 - p1))
    elif job_type == "HKM":
        benefit_meninggal = 0.55 * y1 * p1 + 0.55 * y2 * (p2 - p1)
    else:
        benefit_meninggal = 0
    return benefit_meninggal

# Benefit Keluar
def calculate_benefit_keluar(f1_value, f2_value, p1, p2):
    if job_type == "PNS":
        benefit_keluar = (f1_value  * p1) + f2_value * (p2 - p1)
    elif job_type == "HKM":
        benefit_keluar = (f1_value * p1) + f2_value  * (p2 - p1)
    else:
        benefit_keluar = 0
    return benefit_keluar

# Initialize PrettyTable
table = PrettyTable()
table.field_names = ["Usia", "MI1", "MI2", "P1", "P2", "Y1", "Y2", "F1", "F2", "Benefit Pensiun", "Benefit Uzur", "Benefit Meninggal", "Benefit Keluar"]

# Looping
for usia in range(start_age, pension_age + 1):
    valuation_date = valuation_date + timedelta(days=365) # Adding 1 year

    # Menghitung MI1 dan MI2
    duration_mi1 = MI1(start_date, valuation_date)
    duration_mi2 = MI2(start_date, valuation_date)
    if usia > pension_age-1 :
      duration_mi1=0
      duration_mi2=0

    # Menghitung P1 dan P2
    gaji_list_P1 = P1(start_age, pension_age, gapokawal1)
    gaji_list_P2 = P2(start_age, pension_age, gapokawal2)
    if usia > pension_age :
      gaji_list_P1=0
      gaji_list_P2=0

    # Menghitung Y1 dan Y2
    y1 = Y1(start_age1)
    y2 = Y2(start_date, start_age1, pension_age)
    if usia > pension_age-1 :
      y1=0
      y2=0

    # Mendapatkan nilai F1 dan F2
    def factor_values1(duration_mi1, faktor, column):
      floor_value1 = math.floor(float(duration_mi1))
      fractional_part1 = ((round((duration_mi1 - int(duration_mi1)) * 12)) / 12)
      ceil_value1 = math.ceil(float(duration_mi1))

      f1_values = (
        faktor.loc[floor_value1, 'F1/F2'] +
        fractional_part1 *
        (faktor.loc[ceil_value1, 'F1/F2'] - faktor.loc[floor_value1, 'F1/F2'])
    )
      return f1_values
    f1_value = factor_values1(duration_mi1, faktor, 'F1/F2')

    def factor_values2(duration_mi2, faktor, column):
      floor_value2 = math.floor(float(duration_mi2))
      fractional_part2 = ((round((duration_mi2 - int(duration_mi2)) * 12)) / 12)
      ceil_value2 = math.ceil(float(duration_mi2))

      f2_values = (
        faktor.loc[floor_value2, 'F1/F2'] +
        fractional_part2 *
        (faktor.loc[ceil_value2, 'F1/F2'] - faktor.loc[floor_value2, 'F1/F2'])
    )
      return f2_values
    f2_value = factor_values2(duration_mi2, faktor, 'F1/F2')
    if usia > pension_age-1 :
      f1_value=0
      f2_value=0

    # Menghitung Benefit Uzur
    idx_P1 = min(usia - start_age, len(gaji_list_P1) - 1)
    idx_P2 = min(usia - start_age, len(gaji_list_P2) - 1)
    benefit_uzur = calculate_benefit_uzur(duration_mi1, duration_mi2,gaji_list_P1[idx_P1], gaji_list_P2[idx_P2])
    benefit_uzur_list.append(benefit_uzur)

    # Menghitung Benefit Meninggal
    benefit_meninggal = calculate_benefit_meninggal(y1, gaji_list_P1[idx_P1], gaji_list_P2[idx_P2])
    benefit_meninggal_list.append(benefit_meninggal)

    # Menghitung Benefit Keluar
    benefit_keluar = calculate_benefit_keluar(f1_value,f2_value, gaji_list_P1[idx_P1], gaji_list_P2[idx_P2])
    benefit_keluar_list.append(benefit_keluar)

    # Menghitung Benefit Pensiun
    benefit_pensiun = calculate_benefit_pensiun(gaji_list_P1, gaji_list_P2, job_type)
    benefit_pensiun_list.append(benefit_pensiun)
    if usia < pension_age:
      benefit_pensiun = 0

    # Menambahkan hasil perhitungan ke dalam list
    output1_list.append([usia, duration_mi1, duration_mi2, gaji_list_P1[idx_P1], gaji_list_P2[idx_P2], y1, y2, benefit_pensiun, benefit_uzur, benefit_meninggal, f1_value, f2_value, benefit_keluar])
    table.add_row([usia, duration_mi1, duration_mi2, gaji_list_P1[idx_P1], gaji_list_P2[idx_P2],
                   y1, y2, f1_value, f2_value, benefit_pensiun, benefit_uzur, benefit_meninggal, benefit_keluar])

# Print the PrettyTable
print(table)

# Menghitung pv benefit untuk setiap usia dari usia mulai hingga usia pensiun
result_list = []

for usia in range(start_age, pension_age+1):
    # Benefit Keluar
    lx = mortalita['lx'].tolist()
    wx = mortalita['wx'].tolist()
    benefit_data_keluar = benefit_keluar_list[usia - start_age:]

    accumulated_benefit_keluar = 0
    for k in range(pension_age - usia + 1):
        kpx_keluar = lx[usia + k] / lx[usia] if (usia + k) < len(lx) else 0
        qx_k_keluar = wx[usia + k] / lx[usia + k] if (usia + k) < len(lx) and lx[usia + k] != 0 else 0

        if k < len(benefit_data_keluar):
            accumulated_benefit_keluar += (1 + interest) ** -(k + 1) * kpx_keluar * qx_k_keluar * (interest / math.log(1 + interest)) * benefit_data_keluar[k]
    PV_benefit_keluar_list.append(accumulated_benefit_keluar)

    # Benefit Meninggal
    lx = mortalita['lx'].tolist()
    dx = mortalita['dx'].tolist()
    benefit_data_meninggal = benefit_meninggal_list[usia - start_age:]

    accumulated_benefit_meninggal = 0
    for k in range(pension_age - usia + 1):
        kpx_meninggal = lx[usia + k] / lx[usia] if (usia + k) < len(lx) else 0
        qx_k_meninggal = dx[usia + k] / lx[usia + k] if (usia + k) < len(lx) and lx[usia + k] != 0 else 0

        if k < len(benefit_data_meninggal):
            accumulated_benefit_meninggal += (1 + interest) ** -(k + 1) * kpx_meninggal * qx_k_meninggal * (interest / math.log(1 + interest)) * benefit_data_meninggal[k]
    PV_benefit_meninggal_list.append(accumulated_benefit_meninggal)

    # Benefit Uzur
    lx = mortalita['lx'].tolist()
    ux = mortalita['ux'].tolist()
    benefit_data_uzur = benefit_uzur_list[usia - start_age:]

    accumulated_benefit_uzur = 0
    for k in range(pension_age - usia + 1):
        kpx_uzur = lx[usia + k] / lx[usia] if (usia + k) < len(lx) else 0
        qx_k_uzur = ux[usia + k] / lx[usia + k] if (usia + k) < len(lx) and lx[usia + k] != 0 else 0

        if k < len(benefit_data_uzur):
            accumulated_benefit_uzur += (1 + interest) ** -(k + 1) * kpx_uzur * qx_k_uzur * (interest / math.log(1 + interest)) * benefit_data_uzur[k]
    PV_benefit_uzur_list.append(accumulated_benefit_uzur)

    # PV Benefit Pensiun
    lx = mortalita['lx'].tolist()
    kpx_pensiun = lx[pension_age] / lx[usia]
    accumulated_benefit_pensiun = ((1 + interest) ** -(pension_age - usia)) * kpx_pensiun * benefit_pensiun

    # Menambahkan hasil perhitungan ke dalam list
    PV_benefit_pensiun_list.append(accumulated_benefit_pensiun)
    result_list.append([
        usia,
        f'Rp {round(accumulated_benefit_keluar, 2):,.2f}',
        f'Rp {round(accumulated_benefit_meninggal, 2):,.2f}',
        f'Rp {round(accumulated_benefit_uzur, 2):,.2f}',f'Rp {round(accumulated_benefit_pensiun, 2):,.2f}'
    ])

# Membuat pretty table untuk menyimpan hasil perhitungan
table = PrettyTable()
table.field_names = ["Usia", "PV Benefit Keluar", "PV Benefit Meninggal", "PV Benefit Uzur","PV Benefit Pensiun"]

# Looping
for item in result_list:
    table.add_row(item)

# Menampilkan pretty table
print(table)

"""# Valuasi Asuransi Kematian"""

# ASKEM
askem_peserta_list = []
askem_pasangan_list = []
askem_anak1_list = []
askem_anak2_list = []

PV_askem_peserta_list = []
PV_askem_pasangan_list = []
PV_askem_anak1_list = []
PV_askem_anak2_list = []

# definisikan B dan C
def calculate_bulan_setelah_pensiun(start_age, pension_age):
    bulan_setelah_pensiun_list = []

    for usia in range(start_age, 112):
        if usia < pension_age:
            bulan_setelah_pensiun = 0
        else:
            bulan_setelah_pensiun = (usia - pension_age) * 1
        bulan_setelah_pensiun_list.append(bulan_setelah_pensiun)

    return bulan_setelah_pensiun_list

bulan_setelah_pensiun_list = calculate_bulan_setelah_pensiun(start_age, pension_age)

# definisikan benefit askem peserta, pasangan, anak
# Asuransi Kematian Peserta
def calculate_askem_peserta(usia, pension_age, gapokawal1, gapokawal2,jumlah_pasangan_input=0, jumlah_anak_input=0):
    gaji_list_P2 = P2(start_age, pension_age, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    B = bulan_setelah_pensiun_list[usia - start_age]

    if start_age <= usia <= 111:
        if usia < pension_age - 1:
            askem = 2 * (1) * gaji_list_P2[usia- start_age]
        else:
            askem = 2 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
    else:
        askem = 0
    return askem

for usia in range(start_age, 112):
    askem_value = calculate_askem_peserta(usia, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    askem_peserta_list.append([usia, askem_value])

for usia in range(start_age, 112):
    lx = mortalita['lx'].tolist()
    dx = mortalita['dx'].tolist()

    # Mengambil data benefit dari asuransi_kematian_list
    askem_peserta = askem_peserta_list[usia - start_age:]

    accumulated_benefit_peserta = 0
    for k in range(112 - usia + 1):
        kpx = lx[usia + k] / lx[usia] if (usia + k) < len(lx) else 0
        qx_k = dx[usia + k] / lx[usia + k] if (usia + k) < len(lx) and lx[usia + k] != 0 else 0

        # Memeriksa indeks asuransi_kematian_data
        if k < len(askem_peserta):
            # Menggunakan asuransi_kematian_data untuk menghitung present value
            accumulated_benefit_peserta += (1 + interest) ** -(k + 1) * kpx * qx_k * (interest / math.log(1 + interest)) * askem_peserta[k][1]

    PV_askem_peserta_list.append(round(accumulated_benefit_peserta, 2))

# Asuransi Kematian Pasangan
def calculate_askem_pasangan(usia, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input=0, jumlah_anak_input=0):
    gaji_list_P2 = P2(start_age, pension_age, gapokawal2,jumlah_pasangan_input, jumlah_anak_input)
    B = bulan_setelah_pensiun_list[usia - start_age_pasangan]

    if start_age_pasangan <= usia <= min(111, 111 - (start_age - start_age_pasangan)) and jumlah_pasangan_input > 0:
        if usia < pension_age - (start_age-start_age_pasangan):
            index = max(usia - start_age_pasangan,0)
            if 0 <= index < len(gaji_list_P2):
                askem = 1.5 * (1) * gaji_list_P2[index]
            else:
                askem =  1.5 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
        else:
            askem = 1.5 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
    else:
        askem = 0
    return askem

for usia_pasangan in range(start_age + (start_age_pasangan - start_age), (min(112, 112 - (start_age - start_age_pasangan)))):
    askem_value = calculate_askem_pasangan(usia_pasangan, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    askem_pasangan_list.append([usia_pasangan, askem_value])

for usia_pasangan in range(start_age + (start_age_pasangan - start_age), (min(112, 112 - (start_age - start_age_pasangan)))):
    lx = mortalita['lx'].tolist()
    dx = mortalita['dx'].tolist()

    # Mengambil data benefit dari asuransi_kematian_list
    askem_pasangan = askem_pasangan_list[usia_pasangan - (start_age+ (start_age_pasangan - start_age)):]

    accumulated_benefit_pasangan = 0
    for k in range(112 - usia_pasangan + 1):
        kpx = lx[usia_pasangan + k] / lx[usia_pasangan] if (usia_pasangan + k) < len(lx) else 0
        qx_k = dx[usia_pasangan + k] / lx[usia_pasangan + k] if (usia_pasangan + k) < len(lx) and lx[usia_pasangan + k] != 0 else 0

        # Memeriksa indeks asuransi_kematian_data
        if k < len(askem_pasangan):
            # Menggunakan asuransi_kematian_data untuk menghitung present value
            accumulated_benefit_pasangan += (1 + interest) ** -(k + 1) * kpx * qx_k * (interest / math.log(1 + interest)) * askem_pasangan[k][1]

    PV_askem_pasangan_list.append(round(accumulated_benefit_pasangan, 2))

# Asuransi Kematian Anak 1
def calculate_askem_anak1(usia, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input=0, jumlah_anak_input=0):
    gaji_list_P2 = P2(start_age, pension_age, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    B = bulan_setelah_pensiun_list[usia - start_age_anak1]

    if start_age_anak1 <= usia <= 25 and jumlah_anak_input > 0:
        if usia_anak1 < pension_age - (start_age-start_age_anak1):
            index = max(usia - start_age_anak1,0)
            if 0 <= index < len(gaji_list_P2):
                askem = 0.75 * (1) * gaji_list_P2[index]
            else:
                askem =  0.75 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
        else:
            askem = 0.75 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
    else:
        askem = 0
    return askem

for usia_anak1 in range(start_age_anak1, 26):
    askem_value = calculate_askem_anak1(usia_anak1, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    askem_anak1_list.append([usia_anak1, askem_value])

for usia_anak1 in range(start_age_anak1, 26):
    lx = mortalita['lx'].tolist()
    dx = mortalita['dx'].tolist()

    # Mengambil data benefit dari asuransi_kematian_list
    askem_anak1 = askem_anak1_list[usia_anak1 - (start_age + (start_age_anak1 - start_age)):]

    accumulated_benefit_anak1 = 0
    for k in range(112 - usia_anak1 + 1):
        kpx = lx[usia_anak1 + k] / lx[usia_anak1] if (usia_anak1 + k) < len(lx) else 0
        qx_k = dx[usia_anak1 + k] / lx[usia_anak1 + k] if (usia_anak1 + k) < len(lx) and lx[usia_anak1 + k] != 0 else 0

        # Memeriksa indeks asuransi_kematian_data
        if k < len(askem_anak1):
            # Menggunakan asuransi_kematian_data untuk menghitung present value
            accumulated_benefit_anak1 += (1 + interest) ** -(k + 1) * kpx * qx_k * (interest / math.log(1 + interest)) * askem_anak1[k][1]

    PV_askem_anak1_list.append(round(accumulated_benefit_anak1, 2))

# Asuransi Kematian Anak 2
def calculate_askem_anak2(usia_anak2, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input=0, jumlah_anak_input=0):
    gaji_list_P2 = P2(start_age, pension_age, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
    B = bulan_setelah_pensiun_list[usia_anak2 - start_age_anak2]

    if start_age_anak2 <= usia_anak2 <= 25 and jumlah_anak_input > 1:  # Hanya hitung sampai usia 25 dan jumlah_anak_input > 1
        if usia_anak2 < pension_age - 1:
            askem = 0.75 * (1) * gaji_list_P2[usia_anak2 - start_age_anak2]
        else:
            askem = 0.75 * (1 + 0.1 * (B / 12)) * gaji_list_P2[-1]
    else:
        askem = 0  # Set nilai 0 untuk usia anak 2 di atas 25 tahun atau jumlah_anak_input <= 1

    return askem

# Looping for calculating askem_anak2_list
if jumlah_anak_input > 1:
    for usia_anak2 in range(start_age_anak2, 26):
        askem_value = calculate_askem_anak2(usia_anak2, pension_age, gapokawal1, gapokawal2, jumlah_pasangan_input, jumlah_anak_input)
        askem_anak2_list.append([usia_anak2, askem_value])

# Looping for calculating PV_askem_anak2_list
if jumlah_anak_input > 1:
    for usia_anak2 in range(start_age_anak2, 26):
        lx = mortalita['lx'].tolist()
        dx = mortalita['dx'].tolist()

        # Mengambil data benefit dari askem_anak2_list
        askem_anak2 = askem_anak2_list[usia_anak2 - (start_age + (start_age_anak2 - start_age)):]

        accumulated_benefit_anak2 = 0
        for k in range(112 - usia_anak2 + 1):
            kpx = lx[usia_anak2 + k] / lx[usia_anak2] if (usia_anak2 + k) < len(lx) else 0
            qx_k = dx[usia_anak2 + k] / lx[usia_anak2 + k] if (usia_anak2 + k) < len(lx) and lx[usia_anak2 + k] != 0 else 0

            # Memeriksa indeks askem_anak2
            if k < len(askem_anak2):
                # Menggunakan askem_anak2 untuk menghitung present value
                accumulated_benefit_anak2 += (1 + interest) ** -(k + 1) * kpx * qx_k * (interest / math.log(1 + interest)) * askem_anak2[k][1]

        PV_askem_anak2_list.append(round(accumulated_benefit_anak2, 2))
else:
    # If jumlah_anak_input is not greater than 1, set the PV_askem_anak2_list to 0
    PV_askem_anak2_list = [0] * (26 - start_age_anak2)

# Membuat objek PrettyTable
table = PrettyTable()

# Menambahkan kolom ke tabel
table.field_names = ["Usia Peserta", "Askem Peserta", "PV Askem Peserta",
                     "Usia Pasangan", "Askem Pasangan", "PV Askem Pasangan",
                     "Usia Anak 1", "Askem Anak 1", "PV Askem Anak 1",
                     "Usia Anak 2", "Askem Anak 2", "PV Askem Anak 2"]

# Mengecek panjang maksimum dari semua list yang akan diakses
max_length = max(len(askem_peserta_list), len(askem_pasangan_list), len(askem_anak1_list), len(askem_anak2_list),
                 len(PV_askem_peserta_list), len(PV_askem_pasangan_list), len(PV_askem_anak1_list), len(PV_askem_anak2_list))

# Menambahkan baris ke tabel
for i in range(max_length):
    table.add_row([
        askem_peserta_list[i][0] if i < len(askem_peserta_list) else "",
        askem_peserta_list[i][1] if i < len(askem_peserta_list) else "",
        PV_askem_peserta_list[i] if i < len(PV_askem_peserta_list) else "",
        askem_pasangan_list[i][0] if i < len(askem_pasangan_list) else "",
        askem_pasangan_list[i][1] if i < len(askem_pasangan_list) else "",
        PV_askem_pasangan_list[i] if i < len(PV_askem_pasangan_list) else "",
        askem_anak1_list[i][0] if i < len(askem_anak1_list) else "",
        askem_anak1_list[i][1] if i < len(askem_anak1_list) else "",
        PV_askem_anak1_list[i] if i < len(PV_askem_anak1_list) else "",
        askem_anak2_list[i][0] if i < len(askem_anak2_list) else "",
        askem_anak2_list[i][1] if i < len(askem_anak2_list) else "",
        PV_askem_anak2_list[i] if i < len(PV_askem_anak2_list) else ""
    ])

# Mencetak tabel
print(table)

"""# Valuasi Fixed Cost"""

# FIXED COST

# Menambahkan nilai ke list
fixed_cost_list = []
kpx_list = []
kpy_list = []
kpz1_list = []
kpz2_list = []
kpxyz1z2_list = []
PV_fixed_cost_list=[]

# Fungsi untuk menghitung benefit fixed cost
def calculate_fixed_cost(start_age, inflasi):
    fixed_cost = 6000

    for usia in range(start_age, 112):
        fixed_cost_list.append(fixed_cost)
        fixed_cost *= (1 + inflasi)

    return fixed_cost_list

for x in range(start_age, 112):
    lx = mortalita['lx'].tolist()
    kpx = lx[x] / lx[start_age]
    kpx_list.append(kpx)

if jumlah_pasangan_input > 0:
    for y in range(start_age_pasangan, min(112,112-(start_age-start_age_pasangan))):
        lx = mortalita['lx'].tolist()
        kpy = lx[y] / lx[start_age_pasangan]
        kpy_list.append(kpy)
else:
    kpy_list = []

if jumlah_anak_input > 0:
    for z1 in range(start_age_anak1, 26):
        lx = mortalita['lx'].tolist()
        kpz1 = lx[z1] / lx[start_age_anak1]
        kpz1_list.append(kpz1)
else:
    kpz1_list = []

if jumlah_anak_input > 1:
    for z2 in range(start_age_anak2, 26):
        lx = mortalita['lx'].tolist()
        kpz2 = lx[z2] / lx[start_age_anak2]
        kpz2_list.append(kpz2)
else:
    kpz2_list = []

# Fungsi untuk menghitung kpxyz1z2
def calculate_kpxyz1z2(row):
    kpx = row['kpx']
    kpy = row['kpy']
    kpz1 = row['kpz1']
    kpz2 = row['kpz2']

    return (
        kpx + kpy + kpz1 + kpz2 -
        (kpx * kpy) - (kpx * kpz1) - (kpx * kpz2) -
        (kpy * kpz1) - (kpy * kpz2) - (kpz1 * kpz2) +
        (kpx * kpy * kpz1) + (kpx * kpy * kpz2) +
        (kpx * kpz1 * kpz2) + (kpy * kpz1 * kpz2) -
        (kpx * kpy * kpz1 * kpz2)
    )

# Menentukan panjang maksimum dari keempat list
max_length = max(len(kpx_list), len(kpy_list), len(kpz1_list), len(kpz2_list))

# Membuat DataFrame dengan panjang maksimum dan mengisi nilai NaN dengan 1
df = pd.DataFrame({
    'Age': list(range(start_age, start_age + max_length)),
    'kpx': kpx_list + [None] * (max_length - len(kpx_list)),
    'kpy': kpy_list + [None] * (max_length - len(kpy_list)),
    'kpz1': kpz1_list + [None] * (max_length - len(kpz1_list)),
    'kpz2': kpz2_list + [None] * (max_length - len(kpz2_list))
})

# Mengganti nilai NaN dengan 0
df = df.fillna(0)

# Menambahkan kolom perhitungan kpxyz1z2
df['kpxyz1z2'] = df.apply(calculate_kpxyz1z2, axis=1)
kpxyz1z2_list = df['kpxyz1z2'].tolist()

# Menambahkan kolom fixed cost
fixed_cost_list = calculate_fixed_cost(start_age, inflasi)
df['Fixed Cost'] = fixed_cost_list[:max_length]

def calculate_pv_fixed_cost(start_age, fixed_cost_list, kpxyz1z2_list, interest_rate):
    present_values = {}

    for age in range(start_age, 112):
        present_value = sum(
            fixed_cost_list * (1 + interest) ** -k * kpxyz1z2
            for k, (fixed_cost_list, kpxyz1z2) in enumerate(
                zip(fixed_cost_list[age - start_age :], kpxyz1z2_list[age - start_age :])
            )
        )
        present_values[age] = present_value

    return present_values

# Calculate present value for each age from 38 to 111
present_values = calculate_pv_fixed_cost(start_age, fixed_cost_list, kpxyz1z2_list, interest)
PV_fixed_cost_list = list(present_values.values())

# Display the present values in a pretty table
table_fixed_cost = PrettyTable()
table_fixed_cost.field_names = ["Usia", "kpx", "kpy", "kpz1", "kpz2", "kpxyz1z2", "Fixed Cost", "PV Fixed Cost"]

for i in range(max_length):
    table_fixed_cost.add_row([
        df.loc[i, 'Age'],
        df.loc[i, 'kpx'],
        df.loc[i, 'kpy'],
        df.loc[i, 'kpz1'],
        df.loc[i, 'kpz2'],
        df.loc[i, 'kpxyz1z2'],
        df.loc[i, 'Fixed Cost'],
        present_values[df.loc[i, 'Age']]
    ])
print(table_fixed_cost)



"""# Valuasi Iuran dan Variable Cost"""

# IURAN DAN VARIABEL COST
iuran_list = []
iuran_tahunan_list = []
PV_iuran_list=[]
PV_variable_cost_list=[]

# IURAN BULANAN
def iuran(gaji_list_P2):
    total_iuran = 0
    for gaji in gaji_list_P2:
        total_iuran = 0.0325 * gaji
    return total_iuran

for usia in range(start_age, pension_age):
    pension_date = start_date.replace(year=start_date.year + usia - start_age)
    end_date = pension_date  # Adding 1 year

    gaji_list_P2 = P2(start_age, pension_age, gapokawal2)
    total_iuran_usia = iuran(gaji_list_P2[:usia - start_age+1])
    iuran_list.append(total_iuran_usia)


# IURAN TAHUNAN
for usia in range(start_age, pension_age):
    hasil_iuran_usia = 0

    for k in range(12):
        iuran_usia = iuran_list[usia - start_age]
        im = 12 * (((1 + interest) ** (1/12)) - 1)
        hasil_iuran_usia += iuran_usia * (1 + (im/12)) ** -k

    # Simpan hasil iuran ke dalam iuran_tahunan_list
    iuran_tahunan_list.append(hasil_iuran_usia)

# PV IURAN TAHUNAN
for usia in range(start_age, pension_age):
    lx = mortalita['lx'].tolist()

    pv_iuran_usia = 0

    for k in range(pension_age - usia):
        iuran_index = usia - start_age + k
        if 0 <= iuran_index < len(iuran_tahunan_list):
            iuran_usia = iuran_tahunan_list[iuran_index]
            kpx = lx[usia + k] / lx[usia] if (usia + k) < len(lx) else 0
            pv_iuran_usia += (iuran_usia * ((1 + interest) ** -(k))) * kpx

    PV_iuran_list.append(pv_iuran_usia)


# Loop to calculate variable cost for each age
variabel_cost=0
for usia in range(start_age, pension_age):
    variabel_cost_usia = 0.12 * PV_iuran_list[usia - start_age]
    variabel_cost += variabel_cost_usia
    PV_variable_cost_list.append(variabel_cost)

# Create a PrettyTable
table_iuran = PrettyTable()

# Define the column names
table_iuran.field_names = ["Usia", "PV Iuran", "PV Variable Cost"]

# Add data to the table
for usia, pv_iuran_usia, variabel_cost_usia in zip(range(start_age, pension_age), PV_iuran_list, PV_variable_cost_list):
    table_iuran.add_row([usia, pv_iuran_usia, variabel_cost_usia])
print(table_iuran)

"""# Perhitungan GPV

"""

GPV_list=[]
# Find the maximum length among all lists
max_length = max(
    len(PV_benefit_meninggal_list), len(PV_benefit_uzur_list),
    len(PV_benefit_keluar_list), len(PV_benefit_pensiun_list),
    len(PV_askem_peserta_list), len(PV_askem_pasangan_list),
    len(PV_askem_anak1_list), len(PV_askem_anak2_list),
    len(PV_fixed_cost_list), len(PV_variable_cost_list),
    len(PV_iuran_list)
)

# Pad shorter lists with zeros
PV_benefit_meninggal_list += [0] * (max_length - len(PV_benefit_meninggal_list))
PV_benefit_uzur_list += [0] * (max_length - len(PV_benefit_uzur_list))
PV_benefit_keluar_list += [0] * (max_length - len(PV_benefit_keluar_list))
PV_benefit_pensiun_list += [0] * (max_length - len(PV_benefit_pensiun_list))
PV_askem_pasangan_list += [0] * (max_length - len(PV_askem_pasangan_list))
PV_askem_anak1_list += [0] * (max_length - len(PV_askem_anak1_list))
PV_askem_anak2_list += [0] * (max_length - len(PV_askem_anak2_list))
PV_fixed_cost_list += [0] * (max_length - len(PV_fixed_cost_list))
PV_variable_cost_list += [0] * (max_length - len(PV_variable_cost_list))
PV_iuran_list += [0] * (max_length - len(PV_iuran_list))

GPV = [
    benefit_meninggal + benefit_keluar + benefit_uzur + benefit_pensiun + askem_peserta + askem_pasangan + askem_anak1 + askem_anak2 + fixed_cost + variable_cost - iuran
    for iuran, benefit_meninggal, benefit_keluar, benefit_uzur, benefit_pensiun, askem_peserta, askem_pasangan, askem_anak1, askem_anak2, fixed_cost, variable_cost
    in zip(PV_iuran_list, PV_benefit_meninggal_list, PV_benefit_keluar_list, PV_benefit_uzur_list, PV_benefit_pensiun_list, PV_askem_peserta_list, PV_askem_pasangan_list, PV_askem_anak1_list, PV_askem_anak2_list, PV_fixed_cost_list, PV_variable_cost_list)
]

# Create a PrettyTable instance
table = PrettyTable()

# Define the column names
table.field_names = ["Usia", "PV Benefit Meninggal", "PV Benefit Keluar", "PV Benefit Uzur", "PV Benefit Pensiun", "Askem Peserta", "Askem Pasangan", "Askem Anak1", "Askem Anak2", "Fixed Cost", "Variable Cost", "Iuran", "GPV"]

# Define the age range from 38 to 111
age_range = range(start_age, 112)

# Populate the table with data for the specified age range
for iuran, benefit_meninggal, benefit_keluar, benefit_uzur, benefit_pensiun, askem_peserta, askem_pasangan, askem_anak1, askem_anak2, fixed_cost, variable_cost, age in zip(PV_iuran_list, PV_benefit_meninggal_list, PV_benefit_keluar_list, PV_benefit_uzur_list, PV_benefit_pensiun_list, PV_askem_peserta_list, PV_askem_pasangan_list, PV_askem_anak1_list, PV_askem_anak2_list, PV_fixed_cost_list, PV_variable_cost_list, age_range):

    # Calculate GPV
    gpv_value = benefit_meninggal + benefit_keluar + benefit_uzur + benefit_pensiun + askem_peserta + askem_pasangan + askem_anak1 + askem_anak2 + fixed_cost + variable_cost - iuran
    if gpv_value < 0:
      gpv_value = 0
    GPV_list.append(gpv_value)

    # Add a row to the table
    table.add_row([age, benefit_meninggal, benefit_keluar, benefit_uzur, benefit_pensiun, askem_peserta, askem_pasangan, askem_anak1, askem_anak2, fixed_cost, variable_cost, iuran, gpv_value])

# Print the table
print(table)

# Mendefinisikan usia awal dan usia maksimum
start_age = 38
max_age = 111

# Membuat daftar usia dari usia awal sampai usia maksimum
age_list = list(range(start_age, max_age + 1))

# Membuat plot
plt.plot(age_list, GPV_list, label='GPV Values')

# Menandai area di bawah nol dengan warna merah
plt.fill_between(age_list, GPV_list, where=[value < 0 for value in GPV_list], color='red', alpha=0.3, label='Negative Area')

# Menambahkan label dan judul
plt.xlabel('Age')
plt.ylabel('GPV Value')
plt.title('GPV Values THT Program')

# Menambahkan legenda
plt.legend()

# Menampilkan plot
plt.show()

# Membuat plot
plt.plot(GPV_list, label='GPV Values')

# Menandai area di bawah nol dengan warna merah
plt.fill_between(range(len(GPV_list)), GPV_list, where=[value < 0 for value in GPV_list], color='red', alpha=0.3, label='Negative Area')

# Menetapkan nilai pada sumbu x
plt.xticks(range(start_age, start_age + len(GPV_list)))

# Menambahkan label dan judul
plt.xlabel('Iteration')
plt.ylabel('GPV Value')
plt.title('GPV Values THT Program')

# Menambahkan legenda
plt.legend()

# Menampilkan plot
plt.show()

"""# End"""